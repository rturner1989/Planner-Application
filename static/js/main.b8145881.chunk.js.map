{"version":3,"sources":["Library/Enums.ts","Library/DateTime.ts","Library/Helpers.ts","Components/TaskEditor/TaskEditor.tsx","Components/WeeklyCalender/DailyView/DailyView.tsx","Components/WeeklyCalender/WeeklyView/DailySummary/DailySummary.tsx","Components/WeeklyCalender/WeeklyView/WeeklyView.tsx","Hooks/useLocalStorage.tsx","Components/ModalContainer/ModalContainer.tsx","Components/WeeklyCalender/WeeklyCalender.tsx","App.tsx","index.tsx"],"names":["days","timeState","isDateSame","firstNumber","secondNumber","dateOne","Date","dateTwo","getFullYear","getMonth","getDate","getDayOfCurrentWeek","numberOfDays","currentDate","setDate","getDay","toUTCString","nearestFive","dateString","coeff","date","Math","ceil","getTime","slice","increaseMinsBy15","number","rounded","filterTasksByDate","tasks","filter","task","endDate","filterTasksByTime","time","endTime","split","hourOne","minOne","hourTwo","minTwo","parseInt","filterElapsedTasks","makeID","text","possible","i","charAt","floor","random","length","makeColourCode","toString","firstUpperCase","sentence","replace","letter","toUpperCase","TaskEditor","formData","handleSubmit","useState","id","name","description","toISOString","substr","startTime","color","taskInput","setTaskInput","className","action","onSubmit","e","preventDefault","htmlFor","value","type","placeholder","required","onChange","target","DailyView","setTaskFormData","dailyViewFilteredTasts","setDailyViewFilteredTasts","undefined","editTask","setEditTask","sortedTasks","sort","a","b","useEffect","updateTask","index","findIndex","map","onClick","todaysDate","currentTime","DailySummary","handleDateUpdate","setIsModalVisible","handleClick","day","isActive","setActiveDay","isTaskHover","setIsTaskHover","filteredTasks","setFilteredTasks","elapsedTasks","setElapsedTasks","firstDate","secondDate","today","comparisonDate","FUTURE","PAST","PRESENT","isPastPresentFuture","timeTense","limitToThree","interval","window","setInterval","clearInterval","daysTask","titleRef","useRef","current","scrollIntoView","block","onMouseEnter","onMouseLeave","ref","getDaysTasks","WeeklyView","setUpdateSelectedDate","setSelectedDay","taskFormData","weekCount","setWeekCount","arrOfWeeksFunction","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","arrOfWeeks","setArrOfWeeks","activeDay","displayWeekString","week","useLocalStorage","key","initialState","retrieve","localStorage","getItem","JSON","parse","state","setState","setItem","stringify","ModalContainer","modal","children","handleClose","WeeklyCalender","selectedDay","updateSelectedDate","isModalVisible","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8145881.chunk.js","sourcesContent":["export enum days {\n    MONDAY = \"Mon\",\n    TUESDAY = \"Tue\",\n    WEDNESDAY = \"Wed\",\n    THURSDAY = \"Thur\",\n    FRIDAY = \"Fri\",\n    SATURDAY = \"Sat\",\n    SUNDAY = \"Sun\",\n}\n\nexport enum timeState {\n    PAST = \"past\",\n    PRESENT = \"present\",\n    FUTURE = \"future\",\n}\n","// all functions to support time and dates\nexport const isDateSame = (\n    firstNumber: string,\n    secondNumber: string\n): boolean => {\n    const dateOne = new Date(firstNumber);\n    const dateTwo = new Date(secondNumber);\n    if (dateOne.getFullYear() !== dateTwo.getFullYear()) return false;\n    if (dateOne.getMonth() !== dateTwo.getMonth()) return false;\n    if (dateOne.getDate() !== dateTwo.getDate()) return false;\n    return true;\n};\nexport const getStartWeekDateString = (): string => {\n    // get current date\n    const currentDate = new Date();\n    // get start of current week (monday)\n    const firstday = new Date(\n        currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1)\n    ).toUTCString();\n    return firstday;\n};\nexport const getDayOfCurrentWeek = (numberOfDays: number) => {\n    const currentDate = new Date();\n    const dayOfWeek = new Date(\n        currentDate.setDate(\n            currentDate.getDate() - currentDate.getDay() + numberOfDays\n        )\n    ).toUTCString();\n    return dayOfWeek;\n};\n\nexport const nearestFive = (dateString: string) => {\n    const coeff = 1000 * 60 * 5;\n    const date = new Date(dateString);\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\n    return rounded.toUTCString().slice(17, 22);\n};\n\nexport const increaseMinsBy15 = (dateString: string, number: number) => {\n    const coeff = 1000 * 60 * 5;\n    const date = new Date(dateString);\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\n    const futureDate = new Date(rounded.getTime() + number * 60000);\n    return futureDate.toUTCString().slice(17, 22);\n};\n","import { isDateSame } from \"./DateTime\";\nimport { task } from \"./Interfaces\";\nimport { timeState } from \"./Enums\";\n\nexport const filterTasksByDate = (tasks: task[], date: string) => {\n    return tasks.filter((task) => {\n        if (isDateSame(task.endDate, date)) return task;\n    });\n};\n\nexport const filterTasksByTime = (tasks: task[], time: string) => {\n    return tasks.filter((task) => {\n        const [hourOne, minOne] = task.endTime.split(\":\");\n        const [hourTwo, minTwo] = time.split(\":\");\n\n        if (parseInt(hourOne) > parseInt(hourTwo)) return task;\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\n            if (parseInt(minOne) >= parseInt(minTwo)) return task;\n        }\n    });\n};\n\nexport const filterElapsedTasks = (tasks: task[], time: string) => {\n    return tasks.filter((task) => {\n        const [hourOne, minOne] = task.endTime.split(\":\");\n        const [hourTwo, minTwo] = time.split(\":\");\n\n        if (parseInt(hourOne) < parseInt(hourTwo)) return task;\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\n            if (parseInt(minOne) <= parseInt(minTwo)) return task;\n        }\n    });\n};\n\nexport const isPastPresentFuture = (\n    firstDate: string,\n    secondDate: string\n): timeState => {\n    const today = new Date(firstDate);\n    const comparisonDate = new Date(secondDate);\n\n    if (today.getFullYear() < comparisonDate.getFullYear())\n        return timeState.FUTURE;\n    if (today.getFullYear() > comparisonDate.getFullYear())\n        return timeState.PAST;\n\n    if (today.getMonth() < comparisonDate.getMonth()) return timeState.FUTURE;\n    if (today.getMonth() > comparisonDate.getMonth()) return timeState.PAST;\n\n    if (today.getDate() < comparisonDate.getDate()) return timeState.FUTURE;\n    if (today.getDate() > comparisonDate.getDate()) return timeState.PAST;\n    return timeState.PRESENT;\n};\n\nexport const makeID = () => {\n    let text = \"\";\n    let possible =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < 16; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n};\n\nexport const makeColourCode = () => {\n    const randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    return randomColor;\n};\n\nexport const firstUpperCase = (sentence: string) => {\n    return sentence.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\n        letter.toUpperCase()\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { task } from \"../../Library/Interfaces\";\nimport { makeColourCode, makeID } from \"../../Library/Helpers\";\nimport { increaseMinsBy15, nearestFive } from \"../../Library/DateTime\";\n\ninterface props {\n    date: string;\n    formData: task | undefined;\n    handleSubmit: (newTask: task) => void;\n}\n\nconst TaskEditor: React.FC<props> = ({ date, formData, handleSubmit }) => {\n    const [taskInput, setTaskInput] = useState(\n        formData\n            ? formData\n            : (): task => {\n                  return {\n                      id: makeID(),\n                      name: \"\",\n                      description: \"\",\n                      endDate: new Date(date).toISOString().substr(0, 10),\n                      startTime: nearestFive(date),\n                      endTime: increaseMinsBy15(date, 30),\n                      color: makeColourCode(),\n                  };\n              }\n    );\n\n    return (\n        <form\n            className=\"add-task-form\"\n            action=\"#\"\n            onSubmit={(e) => {\n                e.preventDefault();\n                handleSubmit(taskInput);\n                setTaskInput({\n                    id: makeID(),\n                    name: \"\",\n                    description: \"\",\n                    endDate: taskInput.endDate,\n                    startTime: nearestFive(new Date().toUTCString()),\n                    endTime: increaseMinsBy15(new Date().toUTCString(), 30),\n                    color: makeColourCode(),\n                });\n            }}\n        >\n            <div className=\"title-description-container\">\n                <label className=\"title-input\" htmlFor=\"\">\n                    Title:\n                    <input\n                        value={taskInput.name}\n                        type=\"text\"\n                        name=\"title\"\n                        placeholder=\"Title\"\n                        required\n                        onChange={(e) => {\n                            setTaskInput({\n                                ...taskInput,\n                                name: e.target.value,\n                            });\n                        }}\n                    />\n                </label>\n                <label className=\"description-input\" htmlFor=\"\">\n                    Description:\n                    <textarea\n                        value={taskInput.description}\n                        name=\"description\"\n                        placeholder=\"Description\"\n                        required\n                        onChange={(e) =>\n                            setTaskInput({\n                                ...taskInput,\n                                description: e.target.value,\n                            })\n                        }\n                    />\n                </label>\n            </div>\n            <div className=\"type-input-container\">\n                <label htmlFor=\"\">\n                    Date:\n                    <input\n                        value={taskInput.endDate}\n                        type=\"date\"\n                        name=\"endDate\"\n                        required\n                        onChange={(e) => {\n                            setTaskInput({\n                                ...taskInput,\n                                endDate: e.target.value,\n                            });\n                        }}\n                    />\n                </label>\n                <label htmlFor=\"\">\n                    Start Time:\n                    <input\n                        value={taskInput.startTime}\n                        type=\"time\"\n                        name=\"startTime\"\n                        required\n                        onChange={(e) => {\n                            setTaskInput({\n                                ...taskInput,\n                                startTime: e.target.value,\n                                // fix bug here\n                                // endTime: increaseMinsBy15(\n                                //     taskInput.startTime,\n                                //     30\n                                // ),\n                            });\n                        }}\n                    />\n                </label>\n                <label htmlFor=\"\">\n                    End Time:\n                    <input\n                        value={taskInput.endTime}\n                        type=\"time\"\n                        name=\"endTime\"\n                        required\n                        onChange={(e) => {\n                            setTaskInput({\n                                ...taskInput,\n                                endTime: e.target.value,\n                            });\n                        }}\n                    />\n                </label>\n            </div>\n            <button className=\"submit-btn\" type=\"submit\">\n                Save\n            </button>\n        </form>\n    );\n};\n\nexport default TaskEditor;\n","import React, { useState, useEffect } from \"react\";\nimport {\n    filterTasksByDate,\n    firstUpperCase,\n    makeID,\n} from \"../../../Library/Helpers\";\nimport { task } from \"../../../Library/Interfaces\";\nimport TaskEditor from \"../../TaskEditor/TaskEditor\";\n\ninterface props {\n    date: string;\n    tasks: task[];\n    setTaskFormData: React.Dispatch<React.SetStateAction<task[]>>;\n}\n\nconst DailyView: React.FC<props> = ({ date, tasks, setTaskFormData }) => {\n    const [dailyViewFilteredTasts, setDailyViewFilteredTasts] = useState(tasks);\n    const [editTask, setEditTask] = useState<string | undefined>(undefined);\n\n    const sortedTasks = dailyViewFilteredTasts.sort((a, b) => {\n        if (a.startTime > b.startTime) return 1;\n        if (a.startTime < b.startTime) return -1;\n        return 0;\n    });\n\n    useEffect(() => {\n        setDailyViewFilteredTasts(filterTasksByDate(tasks, date));\n    }, [date, tasks]);\n\n    const updateTask = (a: task) => {\n        const index = tasks.findIndex((task) => task.id === a.id);\n        setTaskFormData([\n            ...tasks.slice(0, index),\n            a,\n            ...tasks.slice(index + 1),\n        ]);\n    };\n\n    const filteredTasks = () => {\n        if (dailyViewFilteredTasts.length !== 0) {\n            return sortedTasks.map((task) => {\n                return (\n                    <div key={makeID()} className=\"task-container\">\n                        <div className=\"sorted-task\">\n                            <h1>{firstUpperCase(task.name)}</h1>\n                            <p>{task.description}</p>\n                            <p>Start: {task.startTime}</p>\n                            <p>End: {task.endTime}</p>\n                            <button onClick={() => setEditTask(task.id)}>\n                                edit\n                            </button>\n                        </div>\n                        {editTask === task.id && (\n                            <div>\n                                <TaskEditor\n                                    formData={task}\n                                    handleSubmit={updateTask}\n                                    date={task.endDate}\n                                />\n                                <button onClick={() => setEditTask(undefined)}>\n                                    cancel\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                );\n            });\n        }\n        return <h1>No Tasks</h1>;\n    };\n\n    return (\n        <div className=\"daily-detail-container\">\n            <div className=\"chosen-date\">{date}</div>\n            <div className=\"filtered-tasks\">{filteredTasks()}</div>\n        </div>\n    );\n};\n\nexport default DailyView;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { days, timeState } from \"../../../../Library/Enums\";\nimport { task } from \"../../../../Library/Interfaces\";\nimport { isDateSame } from \"../../../../Library/DateTime\";\nimport {\n    filterTasksByTime,\n    isPastPresentFuture,\n    filterElapsedTasks,\n    firstUpperCase,\n} from \"../../../../Library/Helpers\";\nimport { MdPlaylistAdd } from \"react-icons/md\";\n\ninterface props {\n    handleDateUpdate: React.Dispatch<React.SetStateAction<string>>;\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    handleClick: React.Dispatch<React.SetStateAction<string>>;\n    day: days;\n    date: string;\n    tasks: task[];\n    isActive: days | undefined;\n    setActiveDay: React.Dispatch<React.SetStateAction<days | undefined>>;\n}\n\nconst todaysDate = new Date().toUTCString();\nconst currentTime = todaysDate.slice(17, 22);\n\nconst DailySummary: React.FC<props> = ({\n    handleDateUpdate,\n    setIsModalVisible,\n    handleClick,\n    day,\n    date,\n    tasks,\n    isActive,\n    setActiveDay,\n}) => {\n    const [isTaskHover, setIsTaskHover] = useState(false);\n    const [filteredTasks, setFilteredTasks] = useState(tasks);\n    const [elapsedTasks, setElapsedTasks] = useState(tasks);\n    const [timeTense, setTimeTense] = useState(() =>\n        isPastPresentFuture(todaysDate, date)\n    );\n\n    const toggleTaskHover = () => {\n        setIsTaskHover(!isTaskHover);\n    };\n\n    const limitToThree = (task: task[]) => {\n        return task.slice(0, 3);\n    };\n\n    const sortedTasks = filteredTasks.sort((a, b) => {\n        if (a.startTime > b.startTime) return 1;\n        if (a.startTime < b.startTime) return -1;\n        return 0;\n    });\n\n    useEffect(() => {\n        let interval: number | undefined = undefined;\n        if (timeTense === timeState.PRESENT) {\n            setFilteredTasks(filterTasksByTime(tasks, currentTime));\n            setElapsedTasks(filterElapsedTasks(tasks, currentTime));\n            interval = window.setInterval(() => {\n                setFilteredTasks(filterTasksByTime(tasks, currentTime));\n                setElapsedTasks(filterElapsedTasks(tasks, currentTime));\n            }, 60000);\n        }\n        return () => {\n            if (interval) clearInterval(interval);\n        };\n    }, [tasks]);\n\n    const daysTask = (task: task) => {\n        return (\n            <div className=\"daily-task\" key={task.id}>\n                <h3 className=\"daily-task-title\">\n                    {firstUpperCase(task.name)}\n                </h3>\n                <div className=\"daily-task-date-range\">\n                    <p>{task.startTime}</p>\n                    <p>-</p>\n                    <p>{task.endTime}</p>\n                </div>\n            </div>\n        );\n    };\n\n    const getDaysTasks = () => {\n        switch (timeTense) {\n            case timeState.PAST:\n                return (\n                    <div className=\"daily-task-placeholder\">\n                        <p>Past</p>\n                        <p>Tasks - {tasks.length}</p>\n                    </div>\n                );\n            case timeState.PRESENT:\n                if (filteredTasks.length === 0) {\n                    return (\n                        <div>\n                            <p>Present</p>\n                            <p>ElapsedTasks - {elapsedTasks.length}</p>\n                        </div>\n                    );\n                }\n                return limitToThree(sortedTasks).map((task) => {\n                    return daysTask(task);\n                });\n            case timeState.FUTURE:\n                if (filteredTasks.length === 0) {\n                    return (\n                        <div>\n                            <p>No Tasks today</p>\n                        </div>\n                    );\n                }\n                return limitToThree(sortedTasks).map((task) => {\n                    return daysTask(task);\n                });\n        }\n    };\n\n    const titleRef = useRef<any>(null);\n\n    const focusScroll = (ref: any) => {\n        const options: ScrollIntoViewOptions = {\n            block: \"center\",\n        };\n        ref.current.scrollIntoView(options);\n    };\n\n    useEffect(() => {\n        if (!titleRef.current) return;\n        focusScroll(titleRef);\n    }, []);\n\n    useEffect(() => {\n        if (isDateSame(date, todaysDate)) setActiveDay(day);\n    }, []);\n\n    return (\n        <div\n            className={\n                isActive === day\n                    ? \"daily-overview-container active\"\n                    : \"daily-overview-container\"\n            }\n            onMouseEnter={toggleTaskHover}\n            onMouseLeave={() => setIsTaskHover(false)}\n            ref={isDateSame(date, todaysDate) ? titleRef : null}\n            onClick={() => setActiveDay(day)}\n        >\n            <div className=\"daily-day-date-container container-child\">\n                <h1 className=\"daily-day\">{day}</h1>\n                <h2 className=\"daily-date\">{date.slice(4, 11)}</h2>\n                {isDateSame(date, todaysDate) && (\n                    <h4 className=\"today-marker\">Today</h4>\n                )}\n            </div>\n            <div\n                className=\"daily-task-container container-child\"\n                onClick={() => {\n                    handleClick(date);\n                    handleDateUpdate(date);\n                }}\n            >\n                {getDaysTasks()}\n            </div>\n            {(timeTense === timeState.FUTURE ||\n                timeTense === timeState.PRESENT) && (\n                <div\n                    className={\n                        isTaskHover\n                            ? \"add-task-btn-container toggle-active\"\n                            : \"add-task-btn-container\"\n                    }\n                >\n                    <button\n                        onClick={() => {\n                            setIsModalVisible(true);\n                            handleDateUpdate(date);\n                        }}\n                    >\n                        <MdPlaylistAdd />\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DailySummary;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { days } from \"../../../Library/Enums\";\nimport { getDayOfCurrentWeek, isDateSame } from \"../../../Library/DateTime\";\nimport { task } from \"../../../Library/Interfaces\";\nimport { filterTasksByDate, makeID } from \"../../../Library/Helpers\";\nimport DailySummary from \"./DailySummary/DailySummary\";\nimport { IoIosArrowBack, IoIosArrowForward } from \"react-icons/io\";\n\ninterface props {\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    taskFormData: task[];\n    setSelectedDay: React.Dispatch<React.SetStateAction<string>>;\n    setUpdateSelectedDate: React.Dispatch<React.SetStateAction<string>>;\n}\ninterface week {\n    day: days;\n    date: string;\n    tasks: task[];\n}\n\nconst WeeklyView: React.FC<props> = ({\n    setUpdateSelectedDate,\n    setIsModalVisible,\n    setSelectedDay,\n    taskFormData,\n}) => {\n    const [weekCount, setWeekCount] = useState(1);\n\n    const arrOfWeeksFunction = (): week[][] => {\n        return [\n            // previous week\n            [\n                {\n                    day: days.SUNDAY,\n                    date: getDayOfCurrentWeek(-7),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-7)\n                    ),\n                },\n                {\n                    day: days.MONDAY,\n                    date: getDayOfCurrentWeek(-6),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-6)\n                    ),\n                },\n                {\n                    day: days.TUESDAY,\n                    date: getDayOfCurrentWeek(-5),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-5)\n                    ),\n                },\n                {\n                    day: days.WEDNESDAY,\n                    date: getDayOfCurrentWeek(-4),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-4)\n                    ),\n                },\n                {\n                    day: days.THURSDAY,\n                    date: getDayOfCurrentWeek(-3),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-3)\n                    ),\n                },\n                {\n                    day: days.FRIDAY,\n                    date: getDayOfCurrentWeek(-2),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-2)\n                    ),\n                },\n                {\n                    day: days.SATURDAY,\n                    date: getDayOfCurrentWeek(-1),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(-1)\n                    ),\n                },\n            ],\n            // current week\n            [\n                {\n                    day: days.SUNDAY,\n                    date: getDayOfCurrentWeek(0),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(0)\n                    ),\n                },\n                {\n                    day: days.MONDAY,\n                    date: getDayOfCurrentWeek(1),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(1)\n                    ),\n                },\n                {\n                    day: days.TUESDAY,\n                    date: getDayOfCurrentWeek(2),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(2)\n                    ),\n                },\n                {\n                    day: days.WEDNESDAY,\n                    date: getDayOfCurrentWeek(3),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(3)\n                    ),\n                },\n                {\n                    day: days.THURSDAY,\n                    date: getDayOfCurrentWeek(4),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(4)\n                    ),\n                },\n                {\n                    day: days.FRIDAY,\n                    date: getDayOfCurrentWeek(5),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(5)\n                    ),\n                },\n                {\n                    day: days.SATURDAY,\n                    date: getDayOfCurrentWeek(6),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(6)\n                    ),\n                },\n            ],\n            // next week\n            [\n                {\n                    day: days.SUNDAY,\n                    date: getDayOfCurrentWeek(7),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(7)\n                    ),\n                },\n                {\n                    day: days.MONDAY,\n                    date: getDayOfCurrentWeek(8),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(8)\n                    ),\n                },\n                {\n                    day: days.TUESDAY,\n                    date: getDayOfCurrentWeek(9),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(9)\n                    ),\n                },\n                {\n                    day: days.WEDNESDAY,\n                    date: getDayOfCurrentWeek(10),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(10)\n                    ),\n                },\n                {\n                    day: days.THURSDAY,\n                    date: getDayOfCurrentWeek(11),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(11)\n                    ),\n                },\n                {\n                    day: days.FRIDAY,\n                    date: getDayOfCurrentWeek(12),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(12)\n                    ),\n                },\n                {\n                    day: days.SATURDAY,\n                    date: getDayOfCurrentWeek(13),\n                    tasks: filterTasksByDate(\n                        taskFormData,\n                        getDayOfCurrentWeek(13)\n                    ),\n                },\n            ],\n        ];\n    };\n\n    const [arrOfWeeks, setArrOfWeeks] = useState<week[][]>(arrOfWeeksFunction);\n\n    const previousWeek = () => {\n        if (weekCount > 0) {\n            setWeekCount(weekCount - 1);\n        }\n    };\n    const nextWeek = () => {\n        if (weekCount < arrOfWeeks.length - 1) {\n            setWeekCount(weekCount + 1);\n        }\n    };\n\n    const displayWeekString = () => {\n        switch (weekCount) {\n            case 0:\n                return <p>Last Week</p>;\n            case 1:\n                return <p>This Week</p>;\n            case 2:\n                return <p>Next Week</p>;\n            default:\n                break;\n        }\n    };\n\n    useEffect(() => {\n        setArrOfWeeks(arrOfWeeksFunction());\n    }, [taskFormData]);\n\n    const [activeDay, setActiveDay] = useState<days | undefined>(undefined);\n\n    return (\n        <div className=\"weekly-overview-container\">\n            <div className=\"btn-group\">\n                <button onClick={previousWeek}>\n                    <IoIosArrowBack />\n                </button>\n                {displayWeekString()}\n                <button onClick={nextWeek}>\n                    <IoIosArrowForward />\n                </button>\n            </div>\n            <div className=\"days\">\n                {arrOfWeeks[weekCount].map((week, index) => {\n                    return (\n                        <DailySummary\n                            key={index}\n                            handleClick={setSelectedDay}\n                            handleDateUpdate={setUpdateSelectedDate}\n                            day={week.day}\n                            date={week.date}\n                            tasks={week.tasks}\n                            setIsModalVisible={setIsModalVisible}\n                            isActive={activeDay}\n                            setActiveDay={setActiveDay}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default WeeklyView;\n","import { useState, useEffect } from \"react\";\nimport { task } from \"../Library/Interfaces\";\n\nconst useLocalStorage = (key: string, initialState: task[]) => {\n    const [state, setState] = useState(() => {\n        const retrieve = localStorage.getItem(key);\n        return retrieve ? JSON.parse(retrieve) : initialState;\n    });\n\n    useEffect(() => {\n        if (state) {\n            localStorage.setItem(key, JSON.stringify(state));\n        }\n    }, [state]);\n\n    return [state, setState];\n};\n\nexport default useLocalStorage;\n","import React from \"react\";\n\ninterface props {\n    modal: string;\n    children: React.ReactNode;\n    handleClose: () => void;\n}\n\nconst ModalContainer: React.FC<props> = ({ modal, children, handleClose }) => {\n    return (\n        <div className={modal}>\n            <button className=\"close-btn\" onClick={handleClose}>\n                Close\n            </button>\n            {children}\n        </div>\n    );\n};\n\nexport default ModalContainer;\n","import { useState } from \"react\";\nimport { task } from \"../../Library/Interfaces\";\nimport DailyView from \"./DailyView/DailyView\";\nimport WeeklyView from \"./WeeklyView/WeeklyView\";\nimport useLocalStorage from \"../../Hooks/useLocalStorage\";\nimport ModalContainer from \"../ModalContainer/ModalContainer\";\nimport TaskEditor from \"../TaskEditor/TaskEditor\";\n\n// Calender Container\n\nconst WeeklyCalender = () => {\n    const [selectedDay, setSelectedDay] = useState<string>(\n        new Date().toUTCString()\n    );\n    const [updateSelectedDate, setUpdateSelectedDate] = useState<string>(\n        new Date().toUTCString()\n    );\n\n    const [taskFormData, setTaskFormData] = useLocalStorage(\"taskList\", []);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const addTask = (task: task) => {\n        setTaskFormData([...taskFormData, task]);\n    };\n\n    return (\n        <div id=\"weekly-calender-container\">\n            <WeeklyView\n                setIsModalVisible={setIsModalVisible}\n                setSelectedDay={setSelectedDay}\n                setUpdateSelectedDate={setUpdateSelectedDate}\n                taskFormData={taskFormData}\n            />\n            {isModalVisible && (\n                <ModalContainer\n                    modal={\"additional-task-modal\"}\n                    handleClose={() => setIsModalVisible(false)}\n                >\n                    <TaskEditor\n                        key={new Date().toUTCString()}\n                        formData={undefined}\n                        handleSubmit={addTask}\n                        date={updateSelectedDate}\n                    />\n                </ModalContainer>\n            )}\n            <DailyView\n                date={selectedDay}\n                tasks={taskFormData}\n                setTaskFormData={setTaskFormData}\n            />\n        </div>\n    );\n};\n\nexport default WeeklyCalender;\n","import WeeklyCalender from \"./Components/WeeklyCalender/WeeklyCalender\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"title-bar\">\n                <h1>Planner</h1>\n            </div>\n            <WeeklyCalender />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./Components/WeeklyCalender/WeeklyCalender.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}