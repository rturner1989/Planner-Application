{"version":3,"sources":["Library/Enums.ts","Library/DateTime.ts","Library/Helpers.ts","Components/TaskEditor/TaskEditor.tsx","Hooks/useWindowDimensions.tsx","Components/WeeklyCalender/DailyView/DailyView.tsx","Components/WeeklyCalender/WeeklyView/DailySummary/DailySummary.tsx","Components/WeeklyCalender/WeeklyView/WeeklyView.tsx","Hooks/useLocalStorage.tsx","Components/ModalContainer/ModalContainer.tsx","Components/WeeklyCalender/WeeklyCalender.tsx","App.tsx","index.tsx"],"names":["days","timeState","isDateSame","firstNumber","secondNumber","dateOne","Date","dateTwo","getFullYear","getMonth","getDate","getDayOfCurrentWeek","numberOfDays","currentDate","setDate","getDay","toUTCString","nearestFive","dateString","coeff","date","Math","ceil","getTime","slice","increaseMinsBy15","number","rounded","filterTasksByDate","tasks","filter","task","endDate","filterTasksByTime","time","endTime","split","hourOne","minOne","hourTwo","minTwo","parseInt","filterElapsedTasks","isPastPresentFuture","firstDate","secondDate","today","comparisonDate","FUTURE","PAST","PRESENT","makeID","text","possible","i","charAt","floor","random","length","makeColourCode","toString","firstLetterOfEveryWord","sentence","replace","letter","toUpperCase","TaskEditor","formData","handleSubmit","style","useState","id","name","description","toISOString","substr","startTime","color","taskInput","setTaskInput","className","action","onSubmit","e","preventDefault","htmlFor","value","type","placeholder","required","onChange","target","borderTop","useWindowDimensions","windowDimensions","setWindowDimensions","useEffect","handleResize","window","width","innerWidth","height","innerHeight","getWindowDimensions","addEventListener","removeEventListener","DailyView","setTaskFormData","setToggleMobile","dailyViewFilteredTasts","setDailyViewFilteredTasts","undefined","editTask","setEditTask","sortedTasks","sort","a","b","updateTask","index","findIndex","modalStyle","filteredTasks","map","word","onClick","focusable","x","deleteTask","todaysDate","currentTime","DailySummary","handleDateUpdate","setIsModalVisible","handleClick","day","isActive","setActive","timeTense","isTaskHover","setIsTaskHover","setFilteredTasks","elapsedTasks","setElapsedTasks","limitToThree","interval","setInterval","clearInterval","daysTask","getDaysTasks","tabIndex","onMouseEnter","onMouseLeave","WeeklyView","setUpdateSelectedDate","setSelectedDay","taskFormData","toggleMobile","weekCount","setWeekCount","activeDate","setActiveDate","arrOfWeeksFunction","SUNDAY","timestate","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","arrOfWeeks","setArrOfWeeks","previousWeek","nextWeek","disabled","displayWeekString","week","useLocalStorage","key","initialState","retrieve","localStorage","getItem","JSON","parse","state","setState","setItem","stringify","ModalContainer","modal","children","handleClose","WeeklyCalender","selectedDay","updateSelectedDate","isModalVisible","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c85d170.chunk.js","sourcesContent":["export enum days {\r\n    MONDAY = \"Mon\",\r\n    TUESDAY = \"Tue\",\r\n    WEDNESDAY = \"Wed\",\r\n    THURSDAY = \"Thur\",\r\n    FRIDAY = \"Fri\",\r\n    SATURDAY = \"Sat\",\r\n    SUNDAY = \"Sun\",\r\n}\r\n\r\nexport enum timeState {\r\n    PAST = \"past\",\r\n    PRESENT = \"present\",\r\n    FUTURE = \"future\",\r\n}\r\n","// all functions to support time and dates\r\nexport const isDateSame = (\r\n    firstNumber: string,\r\n    secondNumber: string\r\n): boolean => {\r\n    const dateOne = new Date(firstNumber);\r\n    const dateTwo = new Date(secondNumber);\r\n    if (dateOne.getFullYear() !== dateTwo.getFullYear()) return false;\r\n    if (dateOne.getMonth() !== dateTwo.getMonth()) return false;\r\n    if (dateOne.getDate() !== dateTwo.getDate()) return false;\r\n    return true;\r\n};\r\nexport const getStartWeekDateString = (): string => {\r\n    // get current date\r\n    const currentDate = new Date();\r\n    // get start of current week (monday)\r\n    const firstday = new Date(\r\n        currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1)\r\n    ).toUTCString();\r\n    return firstday;\r\n};\r\nexport const getDayOfCurrentWeek = (numberOfDays: number) => {\r\n    const currentDate = new Date();\r\n    const dayOfWeek = new Date(\r\n        currentDate.setDate(\r\n            currentDate.getDate() - currentDate.getDay() + numberOfDays\r\n        )\r\n    ).toUTCString();\r\n    return dayOfWeek;\r\n};\r\n\r\nexport const nearestFive = (dateString: string) => {\r\n    const coeff = 1000 * 60 * 5;\r\n    const date = new Date(dateString);\r\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\r\n    return rounded.toUTCString().slice(17, 22);\r\n};\r\n\r\nexport const increaseMinsBy15 = (dateString: string, number: number) => {\r\n    const coeff = 1000 * 60 * 5;\r\n    const date = new Date(dateString);\r\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\r\n    const futureDate = new Date(rounded.getTime() + number * 60000);\r\n    return futureDate.toUTCString().slice(17, 22);\r\n};\r\n","import { isDateSame } from \"./DateTime\";\r\nimport { task } from \"./Interfaces\";\r\nimport { timeState } from \"./Enums\";\r\n\r\nexport const filterTasksByDate = (tasks: task[], date: string) => {\r\n    return tasks.filter((task) => {\r\n        if (isDateSame(task.endDate, date)) return task;\r\n    });\r\n};\r\n\r\nexport const filterTasksByTime = (tasks: task[], time: string) => {\r\n    return tasks.filter((task) => {\r\n        const [hourOne, minOne] = task.endTime.split(\":\");\r\n        const [hourTwo, minTwo] = time.split(\":\");\r\n\r\n        if (parseInt(hourOne) > parseInt(hourTwo)) return task;\r\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\r\n            if (parseInt(minOne) >= parseInt(minTwo)) return task;\r\n        }\r\n    });\r\n};\r\n\r\nexport const filterElapsedTasks = (tasks: task[], time: string) => {\r\n    return tasks.filter((task) => {\r\n        const [hourOne, minOne] = task.endTime.split(\":\");\r\n        const [hourTwo, minTwo] = time.split(\":\");\r\n\r\n        if (parseInt(hourOne) < parseInt(hourTwo)) return task;\r\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\r\n            if (parseInt(minOne) <= parseInt(minTwo)) return task;\r\n        }\r\n    });\r\n};\r\n\r\nexport const isPastPresentFuture = (\r\n    firstDate: string,\r\n    secondDate: string\r\n): timeState => {\r\n    const today = new Date(firstDate);\r\n    const comparisonDate = new Date(secondDate);\r\n\r\n    if (today.getFullYear() < comparisonDate.getFullYear())\r\n        return timeState.FUTURE;\r\n    if (today.getFullYear() > comparisonDate.getFullYear())\r\n        return timeState.PAST;\r\n\r\n    if (today.getMonth() < comparisonDate.getMonth()) return timeState.FUTURE;\r\n    if (today.getMonth() > comparisonDate.getMonth()) return timeState.PAST;\r\n\r\n    if (today.getDate() < comparisonDate.getDate()) return timeState.FUTURE;\r\n    if (today.getDate() > comparisonDate.getDate()) return timeState.PAST;\r\n    return timeState.PRESENT;\r\n};\r\n\r\nexport const makeID = () => {\r\n    let text = \"\";\r\n    let possible =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (let i = 0; i < 16; i++)\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n};\r\n\r\nexport const makeColourCode = () => {\r\n    const randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    return randomColor;\r\n};\r\n\r\nexport const firstLetterOfEveryWord = (sentence: string) => {\r\n    return sentence.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n};\r\n\r\nexport const firstWordUpperCase = (word: string) => {\r\n    return word.replace(/(^\\w{1})/g, (letter) => letter.toUpperCase());\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { task } from \"../../Library/Interfaces\";\r\nimport { makeColourCode, makeID } from \"../../Library/Helpers\";\r\nimport { increaseMinsBy15, nearestFive } from \"../../Library/DateTime\";\r\nimport CSS from \"csstype\";\r\n\r\ninterface props {\r\n    date: string;\r\n    formData: task | undefined;\r\n    handleSubmit: (newTask: task) => void;\r\n    style: CSS.Properties;\r\n}\r\n\r\nconst TaskEditor: React.FC<props> = ({\r\n    date,\r\n    formData,\r\n    handleSubmit,\r\n    style,\r\n}) => {\r\n    const [taskInput, setTaskInput] = useState(\r\n        formData\r\n            ? formData\r\n            : (): task => {\r\n                  return {\r\n                      id: makeID(),\r\n                      name: \"\",\r\n                      description: \"\",\r\n                      endDate: new Date(date).toISOString().substr(0, 10),\r\n                      startTime: nearestFive(date),\r\n                      endTime: increaseMinsBy15(date, 30),\r\n                      color: makeColourCode(),\r\n                  };\r\n              }\r\n    );\r\n\r\n    return (\r\n        <form\r\n            className=\"add-task-form\"\r\n            action=\"#\"\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit(taskInput);\r\n                setTaskInput({\r\n                    id: makeID(),\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    endDate: taskInput.endDate,\r\n                    startTime: nearestFive(new Date().toUTCString()),\r\n                    endTime: increaseMinsBy15(new Date().toUTCString(), 30),\r\n                    color: makeColourCode(),\r\n                });\r\n            }}\r\n        >\r\n            <div className=\"input-container\">\r\n                <div className=\"title-description-container\">\r\n                    <label className=\"title-input-label\" htmlFor=\"title-input\">\r\n                        Title:\r\n                        <input\r\n                            id=\"title-input\"\r\n                            className=\"title-input\"\r\n                            value={taskInput.name}\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            placeholder=\"Title\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    name: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                    <label\r\n                        className=\"description-input-label\"\r\n                        htmlFor=\"description-input\"\r\n                    >\r\n                        Description:\r\n                        <textarea\r\n                            id=\"description-input\"\r\n                            className=\"description-input\"\r\n                            value={taskInput.description}\r\n                            name=\"description\"\r\n                            placeholder=\"Description\"\r\n                            required\r\n                            onChange={(e) =>\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    description: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div className=\"type-input-container\">\r\n                    <label htmlFor=\"date-input\">\r\n                        Date:\r\n                        <input\r\n                            id=\"date-input\"\r\n                            className=\"date-input\"\r\n                            value={taskInput.endDate}\r\n                            type=\"date\"\r\n                            name=\"endDate\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    endDate: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                    <div className=\"time-input\">\r\n                        <label htmlFor=\"time-input-from\">\r\n                            From:\r\n                            <input\r\n                                id=\"time-input-from\"\r\n                                className=\"time-input-from\"\r\n                                value={taskInput.startTime}\r\n                                type=\"time\"\r\n                                name=\"startTime\"\r\n                                required\r\n                                onChange={(e) => {\r\n                                    setTaskInput({\r\n                                        ...taskInput,\r\n                                        startTime: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </label>\r\n                        <label htmlFor=\"time-input-to\">\r\n                            Until:\r\n                            <input\r\n                                id=\"time-input-to\"\r\n                                className=\"time-input-to\"\r\n                                value={taskInput.endTime}\r\n                                type=\"time\"\r\n                                name=\"endTime\"\r\n                                required\r\n                                onChange={(e) => {\r\n                                    setTaskInput({\r\n                                        ...taskInput,\r\n                                        endTime: e.target.value,\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"submit-btn-container\"\r\n                style={{\r\n                    borderTop: style.borderTop,\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"submit-btn\"\r\n                    style={{\r\n                        color: style.color,\r\n                    }}\r\n                    type=\"submit\"\r\n                >\r\n                    Save Task\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TaskEditor;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState<any>({});\r\n\r\n    const getWindowDimensions = () => {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return { width, height };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(() => getWindowDimensions());\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n    return [windowDimensions];\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    filterTasksByDate,\r\n    firstLetterOfEveryWord,\r\n    firstWordUpperCase,\r\n    makeID,\r\n} from \"../../../Library/Helpers\";\r\nimport { task } from \"../../../Library/Interfaces\";\r\nimport TaskEditor from \"../../TaskEditor/TaskEditor\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { AiOutlineShrink } from \"react-icons/ai\";\r\nimport { MdDeleteOutline } from \"react-icons/md\";\r\nimport { GrReturn } from \"react-icons/gr\";\r\nimport CSS from \"csstype\";\r\nimport useWindowDimensions from \"../../../Hooks/useWindowDimensions\";\r\n\r\ninterface props {\r\n    date: string;\r\n    tasks: task[];\r\n    setTaskFormData: React.Dispatch<React.SetStateAction<task[]>>;\r\n    setToggleMobile: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst DailyView: React.FC<props> = ({\r\n    date,\r\n    tasks,\r\n    setTaskFormData,\r\n    setToggleMobile,\r\n}) => {\r\n    const [dailyViewFilteredTasts, setDailyViewFilteredTasts] =\r\n        useState<task[]>(tasks);\r\n    const [editTask, setEditTask] = useState<string | undefined>(undefined);\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const sortedTasks = dailyViewFilteredTasts.sort((a, b) => {\r\n        if (a.startTime > b.startTime) return 1;\r\n        if (a.startTime < b.startTime) return -1;\r\n        return 0;\r\n    });\r\n\r\n    useEffect(() => {\r\n        setDailyViewFilteredTasts(filterTasksByDate(tasks, date));\r\n    }, [date, tasks]);\r\n\r\n    const updateTask = (a: task) => {\r\n        const index = tasks.findIndex((task) => task.id === a.id);\r\n        setTaskFormData([\r\n            ...tasks.slice(0, index),\r\n            a,\r\n            ...tasks.slice(index + 1),\r\n        ]);\r\n        setEditTask(undefined);\r\n    };\r\n\r\n    const deleteTask = (a: task) => {\r\n        const index = tasks.findIndex((x) => x.id === a.id);\r\n        setTaskFormData([...tasks.slice(0, index), ...tasks.slice(index + 1)]);\r\n    };\r\n\r\n    const modalStyle: CSS.Properties = {\r\n        color: \"black\",\r\n        borderTop: \"1px solid rgb(195, 191, 255)\",\r\n    };\r\n\r\n    const filteredTasks = () => {\r\n        if (dailyViewFilteredTasts.length !== 0) {\r\n            return sortedTasks.map((task) => {\r\n                return (\r\n                    <div key={makeID()} className=\"task-container\">\r\n                        <div className=\"sorted-task\">\r\n                            <div className=\"task-title-disc\">\r\n                                <h2>{firstLetterOfEveryWord(task.name)}</h2>\r\n                                <p>{firstWordUpperCase(task.description)}</p>\r\n                            </div>\r\n                            <div className=\"task-time\">\r\n                                <p>\r\n                                    {task.startTime} - {task.endTime}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"task-btn\">\r\n                                {editTask === task.id ? (\r\n                                    <button\r\n                                        className=\"task-edit-btn\"\r\n                                        onClick={() => setEditTask(undefined)}\r\n                                    >\r\n                                        <span className=\"visually-hidden\">\r\n                                            collapse edit box\r\n                                        </span>\r\n                                        <AiOutlineShrink\r\n                                            className=\"task-cancel-svg\"\r\n                                            aria-hidden={true}\r\n                                            focusable={false}\r\n                                        />\r\n                                    </button>\r\n                                ) : (\r\n                                    <button\r\n                                        className=\"task-edit-btn\"\r\n                                        onClick={() => setEditTask(task.id)}\r\n                                    >\r\n                                        <span className=\"visually-hidden\">\r\n                                            open edit box\r\n                                        </span>\r\n                                        <FiEdit\r\n                                            className=\"task-edit-svg\"\r\n                                            aria-hidden={true}\r\n                                            focusable={false}\r\n                                        />\r\n                                    </button>\r\n                                )}\r\n                                <button\r\n                                    className=\"task-delete-btn\"\r\n                                    onClick={() => deleteTask(task)}\r\n                                >\r\n                                    <span className=\"visually-hidden\">\r\n                                        delete task\r\n                                    </span>\r\n                                    <MdDeleteOutline\r\n                                        className=\"task-edit-svg\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        {editTask === task.id && (\r\n                            <div className=\"task-editor\">\r\n                                <div className=\"break\"></div>\r\n                                <TaskEditor\r\n                                    formData={task}\r\n                                    handleSubmit={updateTask}\r\n                                    date={task.endDate}\r\n                                    style={modalStyle}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n        return <h1 className=\"empty-tasks\">No Tasks</h1>;\r\n    };\r\n\r\n    if (windowDimensions.width <= 430) {\r\n        return (\r\n            <div className=\"daily-detail-container\">\r\n                <div className=\"chosen-date-container\">\r\n                    <button\r\n                        className=\"return-btn\"\r\n                        onClick={() => setToggleMobile(false)}\r\n                    >\r\n                        <span className=\"visually-hidden\">\r\n                            return to previous page\r\n                        </span>\r\n                        <GrReturn\r\n                            className=\"return-btn-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                    <h2 className=\"chosen-date\">{date.slice(0, 16)}</h2>\r\n                </div>\r\n                <div className=\"filtered-tasks\">{filteredTasks()}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"daily-detail-container\">\r\n            <h2 className=\"chosen-date\">{date.slice(0, 16)}</h2>\r\n            <div className=\"filtered-tasks\">{filteredTasks()}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { days, timeState } from \"../../../../Library/Enums\";\r\nimport { task } from \"../../../../Library/Interfaces\";\r\nimport { isDateSame } from \"../../../../Library/DateTime\";\r\nimport {\r\n    filterTasksByTime,\r\n    filterElapsedTasks,\r\n    firstLetterOfEveryWord,\r\n} from \"../../../../Library/Helpers\";\r\nimport { MdPlaylistAdd, MdAddTask } from \"react-icons/md\";\r\nimport useWindowDimensions from \"../../../../Hooks/useWindowDimensions\";\r\n\r\ninterface props {\r\n    handleDateUpdate: React.Dispatch<React.SetStateAction<string>>;\r\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\r\n    handleClick: React.Dispatch<React.SetStateAction<string>>;\r\n    day: days;\r\n    date: string;\r\n    tasks: task[];\r\n    isActive: boolean;\r\n    setActive: React.Dispatch<React.SetStateAction<string>>;\r\n    timeTense: timeState;\r\n    setToggleMobile: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst todaysDate = new Date().toUTCString();\r\nconst currentTime = todaysDate.slice(17, 22);\r\n\r\nconst DailySummary: React.FC<props> = ({\r\n    handleDateUpdate,\r\n    setIsModalVisible,\r\n    handleClick,\r\n    day,\r\n    date,\r\n    tasks,\r\n    isActive,\r\n    setActive,\r\n    timeTense,\r\n    setToggleMobile,\r\n}) => {\r\n    const [isTaskHover, setIsTaskHover] = useState(false);\r\n    const [filteredTasks, setFilteredTasks] = useState(tasks);\r\n    const [elapsedTasks, setElapsedTasks] = useState(tasks);\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const toggleTaskHover = () => {\r\n        setIsTaskHover(!isTaskHover);\r\n    };\r\n\r\n    const limitToThree = (task: task[]) => {\r\n        return task.slice(0, 3);\r\n    };\r\n\r\n    const sortedTasks = filteredTasks.sort((a, b) => {\r\n        if (a.startTime > b.startTime) return 1;\r\n        if (a.startTime < b.startTime) return -1;\r\n        return 0;\r\n    });\r\n\r\n    useEffect(() => {\r\n        let interval: number | undefined = undefined;\r\n        if (timeTense === timeState.PRESENT) {\r\n            setFilteredTasks(filterTasksByTime(tasks, currentTime));\r\n            setElapsedTasks(filterElapsedTasks(tasks, currentTime));\r\n            interval = window.setInterval(() => {\r\n                setFilteredTasks(filterTasksByTime(tasks, currentTime));\r\n                setElapsedTasks(filterElapsedTasks(tasks, currentTime));\r\n            }, 60000);\r\n        }\r\n        return () => {\r\n            if (interval) clearInterval(interval);\r\n        };\r\n    }, [tasks]);\r\n\r\n    const daysTask = (task: task) => {\r\n        return (\r\n            <div className=\"daily-task\" key={task.id}>\r\n                <h3 className=\"daily-task-title\">\r\n                    {firstLetterOfEveryWord(task.name)}\r\n                </h3>\r\n                <div className=\"daily-task-date-range\">\r\n                    <p>{task.startTime}</p>\r\n                    <p>-</p>\r\n                    <p>{task.endTime}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const getDaysTasks = () => {\r\n        switch (timeTense) {\r\n            case timeState.PAST:\r\n                return (\r\n                    <p className=\"daily-task-placeholder\">\r\n                        Elapsed Tasks -{\" \"}\r\n                        <span className=\"tasks-length\">{tasks.length}</span>\r\n                    </p>\r\n                );\r\n            case timeState.PRESENT:\r\n                if (filteredTasks.length === 0) {\r\n                    return (\r\n                        <p className=\"daily-task-placeholder\">\r\n                            Elapsed Tasks -{\" \"}\r\n                            <span className=\"tasks-length\">\r\n                                {elapsedTasks.length}\r\n                            </span>\r\n                        </p>\r\n                    );\r\n                }\r\n                return limitToThree(sortedTasks).map((task) => {\r\n                    return daysTask(task);\r\n                });\r\n            case timeState.FUTURE:\r\n                if (filteredTasks.length === 0) {\r\n                    return (\r\n                        <p className=\"daily-task-placeholder\">No Tasks today</p>\r\n                    );\r\n                }\r\n                return limitToThree(sortedTasks).map((task) => {\r\n                    return daysTask(task);\r\n                });\r\n        }\r\n    };\r\n\r\n    // const titleRef = useRef<any>(null);\r\n\r\n    // const focusScroll = (ref: any) => {\r\n    //     const options: ScrollIntoViewOptions = {\r\n    //         block: \"center\",\r\n    //     };\r\n    //     ref.current.scrollIntoView(options);\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     if (!titleRef.current) return;\r\n    //     focusScroll(titleRef);\r\n    // }, []);\r\n\r\n    if (windowDimensions.width <= 430 || windowDimensions.width <= 930) {\r\n        return (\r\n            <div\r\n                className={\r\n                    isActive\r\n                        ? \"daily-overview-container active\"\r\n                        : \"daily-overview-container\"\r\n                }\r\n                tabIndex={0}\r\n            >\r\n                <div\r\n                    className=\"daily-overview-day\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setActive(date);\r\n                        handleClick(date);\r\n                        handleDateUpdate(date);\r\n                        setToggleMobile(true);\r\n                    }}\r\n                >\r\n                    <div className=\"daily-day-date-container container-child\">\r\n                        <h1 className=\"daily-day\">{day}</h1>\r\n                        <h2 className=\"daily-date-container\">\r\n                            <span className=\"daily-date\">\r\n                                {date.slice(4, 7)}\r\n                            </span>\r\n                            <span className=\"daily-month\">\r\n                                {date.slice(8, 11)}\r\n                            </span>\r\n                        </h2>\r\n                        {isDateSame(date, todaysDate) && (\r\n                            <h4 className=\"today-marker\">Today</h4>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"daily-task-container container-child\">\r\n                        {getDaysTasks()}\r\n                    </div>\r\n                </div>\r\n                {(timeTense === timeState.FUTURE ||\r\n                    (timeTense === timeState.PRESENT &&\r\n                        windowDimensions.width <= 430)) && (\r\n                    <div className=\"mobile-add-task-btn-container\">\r\n                        <button\r\n                            className=\"mobile-add-task-btn\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                setIsModalVisible(true);\r\n                                handleDateUpdate(date);\r\n                            }}\r\n                        >\r\n                            <span className=\"visually-hidden\">add task</span>\r\n                            <MdAddTask\r\n                                className=\"add-task-svg\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                isActive\r\n                    ? \"daily-overview-container active\"\r\n                    : \"daily-overview-container\"\r\n            }\r\n            onMouseEnter={toggleTaskHover}\r\n            onMouseLeave={() => setIsTaskHover(false)}\r\n            // ref={isDateSame(date, todaysDate) ? titleRef : null}\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                setActive(date);\r\n                handleClick(date);\r\n                handleDateUpdate(date);\r\n                setToggleMobile(true);\r\n            }}\r\n            tabIndex={0}\r\n        >\r\n            <div className=\"daily-day-date-container container-child\">\r\n                <h1 className=\"daily-day\">{day}</h1>\r\n                <h2 className=\"daily-date-container\">\r\n                    <span className=\"daily-date\">{date.slice(4, 7)}</span>\r\n                    <span className=\"daily-month\">{date.slice(8, 11)}</span>\r\n                </h2>\r\n                {isDateSame(date, todaysDate) && (\r\n                    <h4 className=\"today-marker\">Today</h4>\r\n                )}\r\n            </div>\r\n            <div className=\"daily-task-container container-child\">\r\n                {getDaysTasks()}\r\n            </div>\r\n            {(timeTense === timeState.FUTURE ||\r\n                timeTense === timeState.PRESENT) && (\r\n                <div\r\n                    className={\r\n                        isTaskHover\r\n                            ? \"add-task-btn-container toggle-active\"\r\n                            : \"add-task-btn-container\"\r\n                    }\r\n                >\r\n                    <button\r\n                        className=\"add-task-btn\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setIsModalVisible(true);\r\n                            handleDateUpdate(date);\r\n                        }}\r\n                    >\r\n                        <span className=\"visually-hidden\">add task</span>\r\n                        <MdPlaylistAdd\r\n                            className=\"add-task-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailySummary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { days, timeState } from \"../../../Library/Enums\";\r\nimport { getDayOfCurrentWeek } from \"../../../Library/DateTime\";\r\nimport { task } from \"../../../Library/Interfaces\";\r\nimport {\r\n    filterTasksByDate,\r\n    isPastPresentFuture,\r\n    makeID,\r\n} from \"../../../Library/Helpers\";\r\nimport DailySummary from \"./DailySummary/DailySummary\";\r\nimport { IoIosArrowBack, IoIosArrowForward } from \"react-icons/io\";\r\n\r\ninterface props {\r\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\r\n    taskFormData: task[];\r\n    setSelectedDay: React.Dispatch<React.SetStateAction<string>>;\r\n    setUpdateSelectedDate: React.Dispatch<React.SetStateAction<string>>;\r\n    toggleMobile: boolean;\r\n    setToggleMobile: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\ninterface week {\r\n    day: days;\r\n    date: string;\r\n    tasks: task[];\r\n    timestate: timeState;\r\n}\r\n\r\nconst WeeklyView: React.FC<props> = ({\r\n    setUpdateSelectedDate,\r\n    setIsModalVisible,\r\n    setSelectedDay,\r\n    taskFormData,\r\n    toggleMobile,\r\n    setToggleMobile,\r\n}) => {\r\n    const [weekCount, setWeekCount] = useState(1);\r\n    const todaysDate = new Date().toUTCString();\r\n    const [activeDate, setActiveDate] = useState<string>(todaysDate);\r\n\r\n    const arrOfWeeksFunction = (): week[][] => {\r\n        return [\r\n            // previous week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(-7),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-7)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(-6),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-6)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(-5),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-5)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(-4),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-4)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(-3),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-3)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(-2),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-2)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(-1),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-1)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n            ],\r\n            // current week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(0),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(0)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(0)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(1),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(1)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(1)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(2),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(2)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(2)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(3),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(3)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(3)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(4),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(4)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(4)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(5),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(5)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(5)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(6),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(6)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(6)\r\n                    ),\r\n                },\r\n            ],\r\n            // next week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(7),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(7)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(8),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(8)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(9),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(9)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(10),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(10)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(11),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(11)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(12),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(12)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(13),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(13)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n            ],\r\n        ];\r\n    };\r\n\r\n    const [arrOfWeeks, setArrOfWeeks] = useState<week[][]>(arrOfWeeksFunction);\r\n\r\n    const previousWeek = () => {\r\n        if (weekCount > 0) {\r\n            setWeekCount(weekCount - 1);\r\n        }\r\n    };\r\n    const nextWeek = () => {\r\n        if (weekCount < arrOfWeeks.length - 1) {\r\n            setWeekCount(weekCount + 1);\r\n        }\r\n    };\r\n\r\n    const displayWeekString = () => {\r\n        switch (weekCount) {\r\n            case 0:\r\n                return (\r\n                    <p className=\"selected-week\">\r\n                        <span className=\"selected-week-option\">Last</span> Week\r\n                    </p>\r\n                );\r\n            case 1:\r\n                return (\r\n                    <p className=\"selected-week\">\r\n                        <span className=\"selected-week-option\">Current</span>{\" \"}\r\n                        Week\r\n                    </p>\r\n                );\r\n            case 2:\r\n                return (\r\n                    <p className=\"selected-week\">\r\n                        <span className=\"selected-week-option\">Next</span> Week\r\n                    </p>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setArrOfWeeks(arrOfWeeksFunction());\r\n    }, [taskFormData]);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                toggleMobile\r\n                    ? \"weekly-overview-container mobile\"\r\n                    : \"weekly-overview-container\"\r\n            }\r\n            tabIndex={-1}\r\n        >\r\n            <div className=\"btn-group\">\r\n                {weekCount < 1 ? (\r\n                    <button id=\"prev-week\" onClick={previousWeek} disabled>\r\n                        <span className=\"visually-hidden\">previous week</span>\r\n                        <IoIosArrowBack\r\n                            className=\"prev-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                ) : (\r\n                    <button id=\"prev-week\" onClick={previousWeek}>\r\n                        <span className=\"visually-hidden\">previous week</span>\r\n                        <IoIosArrowBack\r\n                            className=\"prev-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                )}\r\n                {displayWeekString()}\r\n                {weekCount > 1 ? (\r\n                    <button id=\"next-week\" onClick={nextWeek} disabled>\r\n                        <span className=\"visually-hidden\">next week</span>\r\n                        <IoIosArrowForward\r\n                            className=\"next-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                ) : (\r\n                    <button id=\"next-week\" onClick={nextWeek}>\r\n                        <span className=\"visually-hidden\">next week</span>\r\n                        <IoIosArrowForward\r\n                            className=\"next-svg\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <div className=\"days\">\r\n                {arrOfWeeks[weekCount].map((week) => {\r\n                    return (\r\n                        <DailySummary\r\n                            key={makeID()}\r\n                            handleClick={setSelectedDay}\r\n                            handleDateUpdate={setUpdateSelectedDate}\r\n                            day={week.day}\r\n                            date={week.date}\r\n                            tasks={week.tasks}\r\n                            timeTense={week.timestate}\r\n                            setIsModalVisible={setIsModalVisible}\r\n                            isActive={activeDate === week.date}\r\n                            setActive={setActiveDate}\r\n                            setToggleMobile={setToggleMobile}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyView;\r\n","import { useState, useEffect } from \"react\";\r\nimport { task } from \"../Library/Interfaces\";\r\n\r\nconst useLocalStorage = (key: string, initialState: task[]) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\r\n\r\ninterface props {\r\n    modal: string;\r\n    children: React.ReactNode;\r\n    handleClose: () => void;\r\n}\r\n\r\nconst ModalContainer: React.FC<props> = ({ modal, children, handleClose }) => {\r\n    return (\r\n        <div className={modal}>\r\n            <button className=\"close-btn\" onClick={handleClose}>\r\n                <AiOutlineCloseCircle aria-hidden={true} focusable={false} />\r\n            </button>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;\r\n","import { useState } from \"react\";\r\nimport { task } from \"../../Library/Interfaces\";\r\nimport DailyView from \"./DailyView/DailyView\";\r\nimport WeeklyView from \"./WeeklyView/WeeklyView\";\r\nimport useLocalStorage from \"../../Hooks/useLocalStorage\";\r\nimport ModalContainer from \"../ModalContainer/ModalContainer\";\r\nimport TaskEditor from \"../TaskEditor/TaskEditor\";\r\nimport CSS from \"csstype\";\r\n\r\n// Calender Container\r\n\r\nconst WeeklyCalender = () => {\r\n    const [selectedDay, setSelectedDay] = useState<string>(\r\n        new Date().toUTCString()\r\n    );\r\n    const [updateSelectedDate, setUpdateSelectedDate] = useState<string>(\r\n        new Date().toUTCString()\r\n    );\r\n\r\n    const [taskFormData, setTaskFormData] = useLocalStorage(\"taskList\", []);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [toggleMobile, setToggleMobile] = useState<boolean>(false);\r\n\r\n    const addTask = (task: task) => {\r\n        setTaskFormData([...taskFormData, task]);\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const modalStyle: CSS.Properties = {\r\n        color: \"white\",\r\n        borderTop: \"1px solid white\",\r\n    };\r\n\r\n    return (\r\n        <div id=\"weekly-calender-container\">\r\n            <WeeklyView\r\n                setIsModalVisible={setIsModalVisible}\r\n                setSelectedDay={setSelectedDay}\r\n                setUpdateSelectedDate={setUpdateSelectedDate}\r\n                taskFormData={taskFormData}\r\n                toggleMobile={toggleMobile}\r\n                setToggleMobile={setToggleMobile}\r\n            />\r\n            {isModalVisible && (\r\n                <ModalContainer\r\n                    modal={\"additional-task-modal\"}\r\n                    handleClose={() => setIsModalVisible(false)}\r\n                >\r\n                    <TaskEditor\r\n                        key={new Date().toUTCString()}\r\n                        formData={undefined}\r\n                        handleSubmit={addTask}\r\n                        date={updateSelectedDate}\r\n                        style={modalStyle}\r\n                    />\r\n                </ModalContainer>\r\n            )}\r\n            <DailyView\r\n                date={selectedDay}\r\n                tasks={taskFormData}\r\n                setTaskFormData={setTaskFormData}\r\n                setToggleMobile={setToggleMobile}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyCalender;\r\n","import WeeklyCalender from \"./Components/WeeklyCalender/WeeklyCalender\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"title-bar\">\r\n                <h1>Planner</h1>\r\n            </header>\r\n            <WeeklyCalender />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./Components/WeeklyCalender/WeeklyCalender.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}