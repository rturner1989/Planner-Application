{"version":3,"sources":["Library/Enums.ts","Library/DateTime.ts","Library/Helpers.ts","Components/TaskEditor/TaskEditor.tsx","Components/WeeklyCalender/DailyView/DailyView.tsx","Components/WeeklyCalender/WeeklyView/DailySummary/DailySummary.tsx","Components/WeeklyCalender/WeeklyView/WeeklyView.tsx","Hooks/useLocalStorage.tsx","Components/ModalContainer/ModalContainer.tsx","Components/WeeklyCalender/WeeklyCalender.tsx","App.tsx","index.tsx"],"names":["days","timeState","isDateSame","firstNumber","secondNumber","dateOne","Date","dateTwo","getFullYear","getMonth","getDate","getDayOfCurrentWeek","numberOfDays","currentDate","setDate","getDay","toUTCString","nearestFive","dateString","coeff","date","Math","ceil","getTime","slice","increaseMinsBy15","number","rounded","filterTasksByDate","tasks","filter","task","endDate","filterTasksByTime","time","endTime","split","hourOne","minOne","hourTwo","minTwo","parseInt","filterElapsedTasks","isPastPresentFuture","firstDate","secondDate","today","comparisonDate","FUTURE","PAST","PRESENT","makeID","text","possible","i","charAt","floor","random","length","makeColourCode","toString","firstUpperCase","sentence","replace","letter","toUpperCase","TaskEditor","formData","handleSubmit","useState","id","name","description","toISOString","substr","startTime","color","taskInput","setTaskInput","className","action","onSubmit","e","preventDefault","htmlFor","value","type","placeholder","required","onChange","target","DailyView","setTaskFormData","dailyViewFilteredTasts","setDailyViewFilteredTasts","undefined","editTask","setEditTask","sortedTasks","sort","a","b","useEffect","updateTask","index","findIndex","map","onClick","todaysDate","currentTime","DailySummary","handleDateUpdate","setIsModalVisible","handleClick","day","isActive","setActive","timeTense","isTaskHover","setIsTaskHover","filteredTasks","setFilteredTasks","elapsedTasks","setElapsedTasks","limitToThree","interval","window","setInterval","clearInterval","daysTask","onMouseEnter","onMouseLeave","getDaysTasks","WeeklyView","setUpdateSelectedDate","setSelectedDay","taskFormData","weekCount","setWeekCount","activeDate","setActiveDate","arrOfWeeksFunction","SUNDAY","timestate","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","arrOfWeeks","setArrOfWeeks","displayWeekString","week","useLocalStorage","key","initialState","retrieve","localStorage","getItem","JSON","parse","state","setState","setItem","stringify","ModalContainer","modal","children","handleClose","WeeklyCalender","selectedDay","updateSelectedDate","isModalVisible","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b574b6cd.chunk.js","sourcesContent":["export enum days {\r\n    MONDAY = \"Mon\",\r\n    TUESDAY = \"Tue\",\r\n    WEDNESDAY = \"Wed\",\r\n    THURSDAY = \"Thur\",\r\n    FRIDAY = \"Fri\",\r\n    SATURDAY = \"Sat\",\r\n    SUNDAY = \"Sun\",\r\n}\r\n\r\nexport enum timeState {\r\n    PAST = \"past\",\r\n    PRESENT = \"present\",\r\n    FUTURE = \"future\",\r\n}\r\n","// all functions to support time and dates\r\nexport const isDateSame = (\r\n    firstNumber: string,\r\n    secondNumber: string\r\n): boolean => {\r\n    const dateOne = new Date(firstNumber);\r\n    const dateTwo = new Date(secondNumber);\r\n    if (dateOne.getFullYear() !== dateTwo.getFullYear()) return false;\r\n    if (dateOne.getMonth() !== dateTwo.getMonth()) return false;\r\n    if (dateOne.getDate() !== dateTwo.getDate()) return false;\r\n    return true;\r\n};\r\nexport const getStartWeekDateString = (): string => {\r\n    // get current date\r\n    const currentDate = new Date();\r\n    // get start of current week (monday)\r\n    const firstday = new Date(\r\n        currentDate.setDate(currentDate.getDate() - currentDate.getDay() + 1)\r\n    ).toUTCString();\r\n    return firstday;\r\n};\r\nexport const getDayOfCurrentWeek = (numberOfDays: number) => {\r\n    const currentDate = new Date();\r\n    const dayOfWeek = new Date(\r\n        currentDate.setDate(\r\n            currentDate.getDate() - currentDate.getDay() + numberOfDays\r\n        )\r\n    ).toUTCString();\r\n    return dayOfWeek;\r\n};\r\n\r\nexport const nearestFive = (dateString: string) => {\r\n    const coeff = 1000 * 60 * 5;\r\n    const date = new Date(dateString);\r\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\r\n    return rounded.toUTCString().slice(17, 22);\r\n};\r\n\r\nexport const increaseMinsBy15 = (dateString: string, number: number) => {\r\n    const coeff = 1000 * 60 * 5;\r\n    const date = new Date(dateString);\r\n    const rounded = new Date(Math.ceil(date.getTime() / coeff) * coeff);\r\n    const futureDate = new Date(rounded.getTime() + number * 60000);\r\n    return futureDate.toUTCString().slice(17, 22);\r\n};\r\n","import { isDateSame } from \"./DateTime\";\r\nimport { task } from \"./Interfaces\";\r\nimport { timeState } from \"./Enums\";\r\n\r\nexport const filterTasksByDate = (tasks: task[], date: string) => {\r\n    return tasks.filter((task) => {\r\n        if (isDateSame(task.endDate, date)) return task;\r\n    });\r\n};\r\n\r\nexport const filterTasksByTime = (tasks: task[], time: string) => {\r\n    return tasks.filter((task) => {\r\n        const [hourOne, minOne] = task.endTime.split(\":\");\r\n        const [hourTwo, minTwo] = time.split(\":\");\r\n\r\n        if (parseInt(hourOne) > parseInt(hourTwo)) return task;\r\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\r\n            if (parseInt(minOne) >= parseInt(minTwo)) return task;\r\n        }\r\n    });\r\n};\r\n\r\nexport const filterElapsedTasks = (tasks: task[], time: string) => {\r\n    return tasks.filter((task) => {\r\n        const [hourOne, minOne] = task.endTime.split(\":\");\r\n        const [hourTwo, minTwo] = time.split(\":\");\r\n\r\n        if (parseInt(hourOne) < parseInt(hourTwo)) return task;\r\n        if (parseInt(hourOne) === parseInt(hourTwo)) {\r\n            if (parseInt(minOne) <= parseInt(minTwo)) return task;\r\n        }\r\n    });\r\n};\r\n\r\nexport const isPastPresentFuture = (\r\n    firstDate: string,\r\n    secondDate: string\r\n): timeState => {\r\n    const today = new Date(firstDate);\r\n    const comparisonDate = new Date(secondDate);\r\n\r\n    if (today.getFullYear() < comparisonDate.getFullYear())\r\n        return timeState.FUTURE;\r\n    if (today.getFullYear() > comparisonDate.getFullYear())\r\n        return timeState.PAST;\r\n\r\n    if (today.getMonth() < comparisonDate.getMonth()) return timeState.FUTURE;\r\n    if (today.getMonth() > comparisonDate.getMonth()) return timeState.PAST;\r\n\r\n    if (today.getDate() < comparisonDate.getDate()) return timeState.FUTURE;\r\n    if (today.getDate() > comparisonDate.getDate()) return timeState.PAST;\r\n    return timeState.PRESENT;\r\n};\r\n\r\nexport const makeID = () => {\r\n    let text = \"\";\r\n    let possible =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (let i = 0; i < 16; i++)\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n};\r\n\r\nexport const makeColourCode = () => {\r\n    const randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    return randomColor;\r\n};\r\n\r\nexport const firstUpperCase = (sentence: string) => {\r\n    return sentence.replace(/(^\\w{1})|(\\s+\\w{1})/g, (letter) =>\r\n        letter.toUpperCase()\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { task } from \"../../Library/Interfaces\";\r\nimport { makeColourCode, makeID } from \"../../Library/Helpers\";\r\nimport { increaseMinsBy15, nearestFive } from \"../../Library/DateTime\";\r\n\r\ninterface props {\r\n    date: string;\r\n    formData: task | undefined;\r\n    handleSubmit: (newTask: task) => void;\r\n}\r\n\r\nconst TaskEditor: React.FC<props> = ({ date, formData, handleSubmit }) => {\r\n    const [taskInput, setTaskInput] = useState(\r\n        formData\r\n            ? formData\r\n            : (): task => {\r\n                  return {\r\n                      id: makeID(),\r\n                      name: \"\",\r\n                      description: \"\",\r\n                      endDate: new Date(date).toISOString().substr(0, 10),\r\n                      startTime: nearestFive(date),\r\n                      endTime: increaseMinsBy15(date, 30),\r\n                      color: makeColourCode(),\r\n                  };\r\n              }\r\n    );\r\n\r\n    return (\r\n        <form\r\n            className=\"add-task-form\"\r\n            action=\"#\"\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit(taskInput);\r\n                setTaskInput({\r\n                    id: makeID(),\r\n                    name: \"\",\r\n                    description: \"\",\r\n                    endDate: taskInput.endDate,\r\n                    startTime: nearestFive(new Date().toUTCString()),\r\n                    endTime: increaseMinsBy15(new Date().toUTCString(), 30),\r\n                    color: makeColourCode(),\r\n                });\r\n            }}\r\n        >\r\n            <div className=\"input-container\">\r\n                <div className=\"title-description-container\">\r\n                    <label className=\"title-input\" htmlFor=\"\">\r\n                        Title:\r\n                        <input\r\n                            value={taskInput.name}\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            placeholder=\"Title\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    name: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                    <label className=\"description-input\" htmlFor=\"\">\r\n                        Description:\r\n                        <textarea\r\n                            value={taskInput.description}\r\n                            name=\"description\"\r\n                            placeholder=\"Description\"\r\n                            required\r\n                            onChange={(e) =>\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    description: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div className=\"type-input-container\">\r\n                    <label htmlFor=\"\">\r\n                        Date:\r\n                        <input\r\n                            value={taskInput.endDate}\r\n                            type=\"date\"\r\n                            name=\"endDate\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    endDate: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"\">\r\n                        From:\r\n                        <input\r\n                            value={taskInput.startTime}\r\n                            type=\"time\"\r\n                            name=\"startTime\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    startTime: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"\">\r\n                        Until:\r\n                        <input\r\n                            value={taskInput.endTime}\r\n                            type=\"time\"\r\n                            name=\"endTime\"\r\n                            required\r\n                            onChange={(e) => {\r\n                                setTaskInput({\r\n                                    ...taskInput,\r\n                                    endTime: e.target.value,\r\n                                });\r\n                            }}\r\n                        />\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div className=\"submit-btn-container\">\r\n                <button className=\"submit-btn\" type=\"submit\">\r\n                    Save Task\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TaskEditor;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    filterTasksByDate,\r\n    firstUpperCase,\r\n    makeID,\r\n} from \"../../../Library/Helpers\";\r\nimport { task } from \"../../../Library/Interfaces\";\r\nimport TaskEditor from \"../../TaskEditor/TaskEditor\";\r\n\r\ninterface props {\r\n    date: string;\r\n    tasks: task[];\r\n    setTaskFormData: React.Dispatch<React.SetStateAction<task[]>>;\r\n}\r\n\r\nconst DailyView: React.FC<props> = ({ date, tasks, setTaskFormData }) => {\r\n    const [dailyViewFilteredTasts, setDailyViewFilteredTasts] =\r\n        useState<task[]>(tasks);\r\n    const [editTask, setEditTask] = useState<string | undefined>(undefined);\r\n\r\n    const sortedTasks = dailyViewFilteredTasts.sort((a, b) => {\r\n        if (a.startTime > b.startTime) return 1;\r\n        if (a.startTime < b.startTime) return -1;\r\n        return 0;\r\n    });\r\n\r\n    useEffect(() => {\r\n        setDailyViewFilteredTasts(filterTasksByDate(tasks, date));\r\n    }, [date, tasks]);\r\n\r\n    const updateTask = (a: task) => {\r\n        const index = tasks.findIndex((task) => task.id === a.id);\r\n        setTaskFormData([\r\n            ...tasks.slice(0, index),\r\n            a,\r\n            ...tasks.slice(index + 1),\r\n        ]);\r\n        setEditTask(undefined);\r\n    };\r\n\r\n    const filteredTasks = () => {\r\n        if (dailyViewFilteredTasts.length !== 0) {\r\n            return sortedTasks.map((task) => {\r\n                return (\r\n                    <div key={makeID()} className=\"task-container\">\r\n                        <div className=\"sorted-task\">\r\n                            <div className=\"task-title-disc\">\r\n                                <h2>{firstUpperCase(task.name)}</h2>\r\n                                <p>{task.description}</p>\r\n                            </div>\r\n                            <div className=\"task-time\">\r\n                                <p>\r\n                                    {task.startTime} - {task.endTime}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"task-btn\">\r\n                                <button onClick={() => setEditTask(task.id)}>\r\n                                    Edit Task\r\n                                </button>\r\n                                <button onClick={() => setEditTask(undefined)}>\r\n                                    Cancel\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"task-editor\">\r\n                            {editTask === task.id && (\r\n                                <TaskEditor\r\n                                    formData={task}\r\n                                    handleSubmit={updateTask}\r\n                                    date={task.endDate}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n        return <h1>No Tasks</h1>;\r\n    };\r\n\r\n    return (\r\n        <div className=\"daily-detail-container\">\r\n            <div className=\"chosen-date\">{date}</div>\r\n            <div className=\"filtered-tasks\">{filteredTasks()}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailyView;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { days, timeState } from \"../../../../Library/Enums\";\r\nimport { task } from \"../../../../Library/Interfaces\";\r\nimport { isDateSame } from \"../../../../Library/DateTime\";\r\nimport {\r\n    filterTasksByTime,\r\n    filterElapsedTasks,\r\n    firstUpperCase,\r\n} from \"../../../../Library/Helpers\";\r\nimport { MdPlaylistAdd } from \"react-icons/md\";\r\n\r\ninterface props {\r\n    handleDateUpdate: React.Dispatch<React.SetStateAction<string>>;\r\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\r\n    handleClick: React.Dispatch<React.SetStateAction<string>>;\r\n    day: days;\r\n    date: string;\r\n    tasks: task[];\r\n    isActive: boolean;\r\n    setActive: React.Dispatch<React.SetStateAction<string>>;\r\n    timeTense: timeState;\r\n}\r\n\r\nconst todaysDate = new Date().toUTCString();\r\nconst currentTime = todaysDate.slice(17, 22);\r\n\r\nconst DailySummary: React.FC<props> = ({\r\n    handleDateUpdate,\r\n    setIsModalVisible,\r\n    handleClick,\r\n    day,\r\n    date,\r\n    tasks,\r\n    isActive,\r\n    setActive,\r\n    timeTense,\r\n}) => {\r\n    const [isTaskHover, setIsTaskHover] = useState(false);\r\n    const [filteredTasks, setFilteredTasks] = useState(tasks);\r\n    const [elapsedTasks, setElapsedTasks] = useState(tasks);\r\n\r\n    const toggleTaskHover = () => {\r\n        setIsTaskHover(!isTaskHover);\r\n    };\r\n\r\n    const limitToThree = (task: task[]) => {\r\n        return task.slice(0, 3);\r\n    };\r\n\r\n    const sortedTasks = filteredTasks.sort((a, b) => {\r\n        if (a.startTime > b.startTime) return 1;\r\n        if (a.startTime < b.startTime) return -1;\r\n        return 0;\r\n    });\r\n\r\n    useEffect(() => {\r\n        let interval: number | undefined = undefined;\r\n        if (timeTense === timeState.PRESENT) {\r\n            setFilteredTasks(filterTasksByTime(tasks, currentTime));\r\n            setElapsedTasks(filterElapsedTasks(tasks, currentTime));\r\n            interval = window.setInterval(() => {\r\n                setFilteredTasks(filterTasksByTime(tasks, currentTime));\r\n                setElapsedTasks(filterElapsedTasks(tasks, currentTime));\r\n            }, 60000);\r\n        }\r\n        return () => {\r\n            if (interval) clearInterval(interval);\r\n        };\r\n    }, [tasks]);\r\n\r\n    const daysTask = (task: task) => {\r\n        return (\r\n            <div className=\"daily-task\" key={task.id}>\r\n                <h3 className=\"daily-task-title\">\r\n                    {firstUpperCase(task.name)}\r\n                </h3>\r\n                <div className=\"daily-task-date-range\">\r\n                    <p>{task.startTime}</p>\r\n                    <p>-</p>\r\n                    <p>{task.endTime}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const getDaysTasks = () => {\r\n        switch (timeTense) {\r\n            case timeState.PAST:\r\n                return (\r\n                    <div className=\"daily-task-placeholder\">\r\n                        <p>Past</p>\r\n                        <p>Tasks - {tasks.length}</p>\r\n                    </div>\r\n                );\r\n            case timeState.PRESENT:\r\n                if (filteredTasks.length === 0) {\r\n                    return (\r\n                        <div>\r\n                            <p>Present</p>\r\n                            <p>ElapsedTasks - {elapsedTasks.length}</p>\r\n                        </div>\r\n                    );\r\n                }\r\n                return limitToThree(sortedTasks).map((task) => {\r\n                    return daysTask(task);\r\n                });\r\n            case timeState.FUTURE:\r\n                if (filteredTasks.length === 0) {\r\n                    return (\r\n                        <div>\r\n                            <p>No Tasks today</p>\r\n                        </div>\r\n                    );\r\n                }\r\n                return limitToThree(sortedTasks).map((task) => {\r\n                    return daysTask(task);\r\n                });\r\n        }\r\n    };\r\n\r\n    // const titleRef = useRef<any>(null);\r\n\r\n    // const focusScroll = (ref: any) => {\r\n    //     const options: ScrollIntoViewOptions = {\r\n    //         block: \"center\",\r\n    //     };\r\n    //     ref.current.scrollIntoView(options);\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     if (!titleRef.current) return;\r\n    //     focusScroll(titleRef);\r\n    // }, []);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                isActive\r\n                    ? \"daily-overview-container active\"\r\n                    : \"daily-overview-container\"\r\n            }\r\n            onMouseEnter={toggleTaskHover}\r\n            onMouseLeave={() => setIsTaskHover(false)}\r\n            // ref={isDateSame(date, todaysDate) ? titleRef : null}\r\n            onClick={() => setActive(date)}\r\n        >\r\n            <div className=\"daily-day-date-container container-child\">\r\n                <h1 className=\"daily-day\">{day}</h1>\r\n                <h2 className=\"daily-date\">{date.slice(4, 11)}</h2>\r\n                {isDateSame(date, todaysDate) && (\r\n                    <h4 className=\"today-marker\">Today</h4>\r\n                )}\r\n            </div>\r\n            <div\r\n                className=\"daily-task-container container-child\"\r\n                onClick={() => {\r\n                    handleClick(date);\r\n                    handleDateUpdate(date);\r\n                }}\r\n            >\r\n                {getDaysTasks()}\r\n            </div>\r\n            {(timeTense === timeState.FUTURE ||\r\n                timeTense === timeState.PRESENT) && (\r\n                <div\r\n                    className={\r\n                        isTaskHover\r\n                            ? \"add-task-btn-container toggle-active\"\r\n                            : \"add-task-btn-container\"\r\n                    }\r\n                >\r\n                    <button\r\n                        onClick={() => {\r\n                            setIsModalVisible(true);\r\n                            handleDateUpdate(date);\r\n                        }}\r\n                    >\r\n                        <MdPlaylistAdd />\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DailySummary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { days, timeState } from \"../../../Library/Enums\";\r\nimport { getDayOfCurrentWeek } from \"../../../Library/DateTime\";\r\nimport { task } from \"../../../Library/Interfaces\";\r\nimport {\r\n    filterTasksByDate,\r\n    isPastPresentFuture,\r\n    makeID,\r\n} from \"../../../Library/Helpers\";\r\nimport DailySummary from \"./DailySummary/DailySummary\";\r\nimport { IoIosArrowBack, IoIosArrowForward } from \"react-icons/io\";\r\n\r\ninterface props {\r\n    setIsModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\r\n    taskFormData: task[];\r\n    setSelectedDay: React.Dispatch<React.SetStateAction<string>>;\r\n    setUpdateSelectedDate: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\ninterface week {\r\n    day: days;\r\n    date: string;\r\n    tasks: task[];\r\n    timestate: timeState;\r\n}\r\n\r\nconst WeeklyView: React.FC<props> = ({\r\n    setUpdateSelectedDate,\r\n    setIsModalVisible,\r\n    setSelectedDay,\r\n    taskFormData,\r\n}) => {\r\n    const [weekCount, setWeekCount] = useState(1);\r\n    const todaysDate = new Date().toUTCString();\r\n    const [activeDate, setActiveDate] = useState<string>(todaysDate);\r\n\r\n    const arrOfWeeksFunction = (): week[][] => {\r\n        return [\r\n            // previous week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(-7),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-7)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(-6),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-6)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(-5),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-5)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(-4),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-4)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(-3),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-3)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(-2),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-2)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(-1),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(-1)\r\n                    ),\r\n                    timestate: timeState.PAST,\r\n                },\r\n            ],\r\n            // current week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(0),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(0)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(0)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(1),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(1)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(1)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(2),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(2)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(2)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(3),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(3)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(3)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(4),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(4)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(4)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(5),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(5)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(5)\r\n                    ),\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(6),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(6)\r\n                    ),\r\n                    timestate: isPastPresentFuture(\r\n                        todaysDate,\r\n                        getDayOfCurrentWeek(6)\r\n                    ),\r\n                },\r\n            ],\r\n            // next week\r\n            [\r\n                {\r\n                    day: days.SUNDAY,\r\n                    date: getDayOfCurrentWeek(7),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(7)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.MONDAY,\r\n                    date: getDayOfCurrentWeek(8),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(8)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.TUESDAY,\r\n                    date: getDayOfCurrentWeek(9),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(9)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.WEDNESDAY,\r\n                    date: getDayOfCurrentWeek(10),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(10)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.THURSDAY,\r\n                    date: getDayOfCurrentWeek(11),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(11)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.FRIDAY,\r\n                    date: getDayOfCurrentWeek(12),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(12)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n                {\r\n                    day: days.SATURDAY,\r\n                    date: getDayOfCurrentWeek(13),\r\n                    tasks: filterTasksByDate(\r\n                        taskFormData,\r\n                        getDayOfCurrentWeek(13)\r\n                    ),\r\n                    timestate: timeState.FUTURE,\r\n                },\r\n            ],\r\n        ];\r\n    };\r\n\r\n    const [arrOfWeeks, setArrOfWeeks] = useState<week[][]>(arrOfWeeksFunction);\r\n\r\n    const previousWeek = () => {\r\n        if (weekCount > 0) {\r\n            setWeekCount(weekCount - 1);\r\n        }\r\n    };\r\n    const nextWeek = () => {\r\n        if (weekCount < arrOfWeeks.length - 1) {\r\n            setWeekCount(weekCount + 1);\r\n        }\r\n    };\r\n\r\n    const displayWeekString = () => {\r\n        switch (weekCount) {\r\n            case 0:\r\n                return <p>Last Week</p>;\r\n            case 1:\r\n                return <p>This Week</p>;\r\n            case 2:\r\n                return <p>Next Week</p>;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setArrOfWeeks(arrOfWeeksFunction());\r\n    }, [taskFormData]);\r\n\r\n    return (\r\n        <div className=\"weekly-overview-container\">\r\n            <div className=\"btn-group\">\r\n                <button onClick={previousWeek}>\r\n                    <IoIosArrowBack />\r\n                </button>\r\n                {displayWeekString()}\r\n                <button onClick={nextWeek}>\r\n                    <IoIosArrowForward />\r\n                </button>\r\n            </div>\r\n            <div className=\"days\">\r\n                {arrOfWeeks[weekCount].map((week) => {\r\n                    return (\r\n                        <DailySummary\r\n                            key={makeID()}\r\n                            handleClick={setSelectedDay}\r\n                            handleDateUpdate={setUpdateSelectedDate}\r\n                            day={week.day}\r\n                            date={week.date}\r\n                            tasks={week.tasks}\r\n                            timeTense={week.timestate}\r\n                            setIsModalVisible={setIsModalVisible}\r\n                            isActive={activeDate === week.date}\r\n                            setActive={setActiveDate}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyView;\r\n","import { useState, useEffect } from \"react\";\r\nimport { task } from \"../Library/Interfaces\";\r\n\r\nconst useLocalStorage = (key: string, initialState: task[]) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\r\n\r\ninterface props {\r\n    modal: string;\r\n    children: React.ReactNode;\r\n    handleClose: () => void;\r\n}\r\n\r\nconst ModalContainer: React.FC<props> = ({ modal, children, handleClose }) => {\r\n    return (\r\n        <div className={modal}>\r\n            <button className=\"close-btn\" onClick={handleClose}>\r\n                <AiOutlineCloseCircle />\r\n            </button>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;\r\n","import { useState } from \"react\";\r\nimport { task } from \"../../Library/Interfaces\";\r\nimport DailyView from \"./DailyView/DailyView\";\r\nimport WeeklyView from \"./WeeklyView/WeeklyView\";\r\nimport useLocalStorage from \"../../Hooks/useLocalStorage\";\r\nimport ModalContainer from \"../ModalContainer/ModalContainer\";\r\nimport TaskEditor from \"../TaskEditor/TaskEditor\";\r\n\r\n// Calender Container\r\n\r\nconst WeeklyCalender = () => {\r\n    const [selectedDay, setSelectedDay] = useState<string>(\r\n        new Date().toUTCString()\r\n    );\r\n    const [updateSelectedDate, setUpdateSelectedDate] = useState<string>(\r\n        new Date().toUTCString()\r\n    );\r\n\r\n    const [taskFormData, setTaskFormData] = useLocalStorage(\"taskList\", []);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const addTask = (task: task) => {\r\n        setTaskFormData([...taskFormData, task]);\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"weekly-calender-container\">\r\n            <WeeklyView\r\n                setIsModalVisible={setIsModalVisible}\r\n                setSelectedDay={setSelectedDay}\r\n                setUpdateSelectedDate={setUpdateSelectedDate}\r\n                taskFormData={taskFormData}\r\n            />\r\n            {isModalVisible && (\r\n                <ModalContainer\r\n                    modal={\"additional-task-modal\"}\r\n                    handleClose={() => setIsModalVisible(false)}\r\n                >\r\n                    <TaskEditor\r\n                        key={new Date().toUTCString()}\r\n                        formData={undefined}\r\n                        handleSubmit={addTask}\r\n                        date={updateSelectedDate}\r\n                    />\r\n                </ModalContainer>\r\n            )}\r\n            <DailyView\r\n                date={selectedDay}\r\n                tasks={taskFormData}\r\n                setTaskFormData={setTaskFormData}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyCalender;\r\n","import WeeklyCalender from \"./Components/WeeklyCalender/WeeklyCalender\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"title-bar\">\r\n                <h1>Planner</h1>\r\n            </div>\r\n            <WeeklyCalender />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./Components/WeeklyCalender/WeeklyCalender.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}